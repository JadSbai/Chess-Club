
# Generated by Django 3.2.5 on 2021-12-14 18:35


import chessclubs.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('bio', models.CharField(blank=True, max_length=520)),
                ('chess_experience', models.CharField(choices=[('Novice', 'Novice'), ('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced'), ('Expert', 'Expert')], default='novice', max_length=50)),
                ('personal_statement', models.CharField(max_length=500)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('location', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=520)),
                ('members', models.ManyToManyField(related_name='clubs', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('access_members_list', 'Can access the list of members'), ('show_public_info', "Can access a member's public info"), ('show_private_info', "Can access a member's private info"), ('promote', 'Can promote members'), ('demote', 'Can demote officers'), ('transfer_ownership', 'Can transfer ownership to an officer'), ('manage_applications', 'Can manage applications'), ('access_club_info', "Can access a club's public info"), ('access_club_owner_public_info', 'Can access a club owner public info'), ('acknowledge_response', 'Can acknowledge response (acceptance or denial) to an application'), ('apply_to_club', 'Can apply to club'), ('ban', 'Can ban a user from the club'), ('leave', 'Can leave a club'), ('create_tournament', 'Can create a tournament'), ('apply_tournament', 'Can apply to a tournament'), ('withdraw_tournament', 'Can withdraw from a tournament'), ('edit_club_info', 'Can edit club information')],
            },
        ),
        migrations.CreateModel(
            name='EliminationRounds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phase', models.CharField(choices=[('Final', 'Final'), ('Semi-Final', 'Semi-Final'), ('Quarter-Final', 'Quarter_Final'), ('Eighth-Final', 'Eighth-Final')], default='Eighth-Final', max_length=50)),
                ('_open', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_open', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(max_length=240)),
                ('location', models.CharField(max_length=50)),
                ('max_capacity', models.IntegerField(default=2, validators=[django.core.validators.MaxValueValidator(96, 'The max capacity needs to be less than 96.'), django.core.validators.MinValueValidator(2, 'The max capacity needs to be at least 2.')])),
                ('deadline', models.DateTimeField(validators=[chessclubs.models.validate_tournament_deadline])),
                ('_start_phase', models.CharField(choices=[('Elimination-Rounds', 'Elimination-Rounds'), ('Small-Pool-Phase', 'Small-Pool-Phase'), ('Large-Pool-Phase', 'Large-Pool-Phase')], default='Elimination-Rounds', max_length=50)),
                ('_started', models.BooleanField(default=False)),
                ('_finished', models.BooleanField(default=False)),
                ('_schedule_published', models.BooleanField(default=False)),
                ('_winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_tournaments', to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='all_tournaments', to='chessclubs.club')),
                ('co_organisers', models.ManyToManyField(related_name='co_organised_tournaments', to=settings.AUTH_USER_MODEL)),
                ('organiser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organised_tournaments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('play_matches', 'Can play matches'), ('enter_match_results', 'Can enter match results'), ('see_tournament_private_info', 'Can see tournament private info'), ('withdraw', 'Can withdraw')],
            },
        ),
        migrations.CreateModel(
            name='EliminationMatch',
            fields=[
                ('match_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='chessclubs.match')),
            ],
            bases=('chessclubs.match',),
        ),
        migrations.CreateModel(
            name='PoolMatch',
            fields=[
                ('match_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='chessclubs.match')),
            ],
            bases=('chessclubs.match',),
        ),
        migrations.CreateModel(
            name='TournamentPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_permission', to='auth.permission')),
                ('groups', models.ManyToManyField(related_name='tournament_permissions', to='auth.Group')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chessclubs.tournament')),
                ('users', models.ManyToManyField(related_name='user_tournament_permissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PoolPhase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Small-Pool-Phase', 'Small-Pool-Phase'), ('Large-Pool-Phase', 'Large-Pool-Phase')], max_length=50)),
                ('_closed', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pool_phases', to='chessclubs.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Pool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_matches_played', models.BooleanField(default=False)),
                ('pool_phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pools', to='chessclubs.poolphase')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_points', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('_elimination_round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='EL_players', to='chessclubs.eliminationrounds')),
                ('_encountered_players', models.ManyToManyField(related_name='_chessclubs_player__encountered_players_+', to='chessclubs.Player')),
                ('_pool_phases', models.ManyToManyField(related_name='PP_players', to='chessclubs.PoolPhase')),
                ('_pools', models.ManyToManyField(related_name='pool_players', to='chessclubs.Pool')),
                ('_won_pool_phases', models.ManyToManyField(related_name='PP_qualified_players', to='chessclubs.PoolPhase')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='chessclubs.tournament')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-_points'],
            },
        ),
        migrations.AddField(
            model_name='match',
            name='_player1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='chessclubs.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='_player2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_matches', to='chessclubs.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='_winner',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_matches', to='chessclubs.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_schedule', to='chessclubs.tournament'),
        ),
        migrations.AddField(
            model_name='eliminationrounds',
            name='_tournament',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='elimination_round', to='chessclubs.tournament'),
        ),
        migrations.AddField(
            model_name='eliminationrounds',
            name='_winner',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_elimination_rounds', to='chessclubs.player'),
        ),
        migrations.CreateModel(
            name='ClubPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_permission', to='auth.permission')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chessclubs.club')),
                ('groups', models.ManyToManyField(related_name='club_permissions', to='auth.Group')),
                ('users', models.ManyToManyField(related_name='user_club_permissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='tournamentpermission',
            index=models.Index(fields=['tournament', 'base_permission'], name='chessclubs__tournam_556660_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tournamentpermission',
            unique_together={('tournament', 'base_permission')},
        ),
        migrations.AlterUniqueTogether(
            name='poolphase',
            unique_together={('name', 'tournament')},
        ),
        migrations.AddField(
            model_name='poolmatch',
            name='pool',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pool_matches', to='chessclubs.pool'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['user', 'tournament'], name='chessclubs__user_id_316feb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='player',
            unique_together={('user', 'tournament')},
        ),
        migrations.AddField(
            model_name='eliminationmatch',
            name='elimination_round',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='chessclubs.eliminationrounds'),
        ),
        migrations.AddIndex(
            model_name='clubpermission',
            index=models.Index(fields=['club', 'base_permission'], name='chessclubs__club_id_da7704_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clubpermission',
            unique_together={('club', 'base_permission')},
        ),
    ]
